// @flow

export interface EventEmitterInterface<Events: {}> {
  addListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): EventEmitterInterface<Events>;
  emit: <Event: $Keys<Events>>(
    event: Event,
    ...$ElementType<Events, Event>
  ) => boolean;
  emitted: <Event: $Keys<Events>>(
    event: Event
  ) => Promise<$ElementType<$ElementType<Events, Event>, 0>>;
  eventNames(): Array<$Keys<Events>>;
  listeners(event: $Keys<Events>): Array<Function>;
  listenerCount(event: $Keys<Events>): number;
  on<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): EventEmitterInterface<Events>;
  once<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): EventEmitterInterface<Events>;
  prependListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): EventEmitterInterface<Events>;
  prependOnceListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): EventEmitterInterface<Events>;
  removeAllListeners(event?: $Keys<Events>): EventEmitterInterface<Events>;
  removeListener(
    event: $Keys<Events>,
    listener: Function
  ): EventEmitterInterface<Events>;
  setMaxListeners(n: number): EventEmitterInterface<Events>;
  getMaxListeners(): number;
}

declare export default class EventEmitter<Events: {}>
  implements EventEmitterInterface<Events>
{
  addListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): this;
  emit: <Event: $Keys<Events>>(
    event: Event,
    ...$ElementType<Events, Event>
  ) => boolean;
  emitted: <Event: $Keys<Events>>(
    event: Event,
    filter?: (event: $ElementType<$ElementType<Events, Event>, 0>) => boolean
  ) => Promise<$ElementType<$ElementType<Events, Event>, 0>>;
  emitted: <Event: $Keys<Events>>(
    event: Event,
    options?: {
      // I can't figure out how to type multiArgs: true
      multiArgs?: false,
      filter?: (event: $ElementType<$ElementType<Events, Event>, 0>) => boolean,
    }
  ) => Promise<$ElementType<$ElementType<Events, Event>, 0>>;
  eventNames(): Array<$Keys<Events>>;
  listeners(event: $Keys<Events>): Array<Function>;
  listenerCount(event: $Keys<Events>): number;
  on<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): this;
  once<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): this;
  prependListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): this;
  prependOnceListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any
  ): this;
  removeAllListeners(event?: $Keys<Events>): this;
  removeListener(event: $Keys<Events>, listener: Function): this;
  setMaxListeners(n: number): this;
  getMaxListeners(): number;
}
